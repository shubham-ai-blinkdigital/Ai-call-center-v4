Looking at your current database schema and the proposed calls table, here's how it aligns perfectly with your existing structure:

Perfect Alignment with Current Schema
1. Consistent with User Management
Your proposed calls table uses the same user_id UUID pattern that's already established in:

users table - Primary user records
phone_numbers table - Links phone numbers to users
pathways table - Links pathways to users
2. Integrates with Phone Number System
The calls table's to_number and from_number fields will work seamlessly with your existing:

-- From your current schema
CREATE TABLE phone_numbers (
    id UUID PRIMARY KEY,
    phone_number VARCHAR(50) UNIQUE NOT NULL,
    user_id UUID REFERENCES users(id),
    -- ... other fields
);
You can easily join calls with phone ownership:

-- Find calls for user's purchased numbers
SELECT c.*, pn.pathway_id 
FROM calls c
JOIN phone_numbers pn ON (c.to_number = pn.phone_number OR c.from_number = pn.phone_number)
WHERE pn.user_id = $1;
3. Enhances Existing Cost Tracking
Looking at your backups, you already have a call_logs table with cost tracking:

-- From your existing schema
CREATE TABLE call_logs (
    id bigint NOT NULL,
    subscription_id bigint NOT NULL,
    call_id text NOT NULL,
    duration_sec integer NOT NULL,
    cost_cents bigint NOT NULL,
    -- ...
);
Your new calls table perfectly complements this by:

Using the same call_id field for linking
Including cost_cents for direct cost storage
Adding rich call data (transcript, summary, recording_url) that call_logs lacks
4. Matches PostgreSQL Standards
Your schema follows the same patterns as your existing tables:

✅ UUID primary keys (id UUID)
✅ Timestamp fields (created_at TIMESTAMP)
✅ Foreign key constraints (REFERENCES users(id))
✅ Proper indexing strategy
5. Supports Current Workflow
This table structure supports your existing API patterns:

User Authentication: user_id links to your existing user system
Phone Number Filtering: to_number/from_number match your current Bland.ai API filtering
Cost Integration: cost_cents aligns with your wallet/billing system
Schema Relationships
users (existing)
├── phone_numbers (existing) 
│   └── calls (new) ← Links via to_number/from_number
├── pathways (existing)
└── call_logs (existing) ← Can link via call_id
Benefits for Your Current System
Maintains Compatibility: No breaking changes to existing functionality
Enhances Performance: Replace API calls with fast database queries
Preserves Data Integrity: Same foreign key patterns you're already using
Supports Analytics: Rich data for your existing dashboard/reports
The proposed calls table is a natural extension of your current schema that will integrate seamlessly without requiring any changes to your existing table structure.


Scroll to latest
Assistant mode
