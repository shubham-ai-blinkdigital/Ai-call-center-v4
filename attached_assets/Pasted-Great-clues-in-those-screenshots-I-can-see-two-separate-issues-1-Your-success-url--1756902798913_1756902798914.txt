Great clues in those screenshots — I can see two separate issues:

---

## 1) Your **success\_url** is pointing to `http://localhost:3000`

That’s why you land on `localhost:3000/billing?success=1` and see “This site can’t be reached”. Your **create-checkout-session** route still has localhost hard-coded.

### Fix (use your Replit domain automatically)

Update `app/api/payments/stripe/create-checkout-session/route.ts`:

```ts
// Ensure node runtime
export const runtime = 'nodejs';

function getOrigin(req: Request) {
  // Works behind Replit/Vercel proxies
  const proto = req.headers.get('x-forwarded-proto') ?? 'https';
  const host  = req.headers.get('x-forwarded-host')  // Replit
            ?? req.headers.get('host');              // Fallback
  return `${proto}://${host}`;
}

export async function POST(req: Request) {
  const { amount } = await req.json();
  const amountCents = Math.round(Number(amount) * 100);

  const origin = getOrigin(req);              // <-- use this
  const userId = 'YOUR_REAL_USER_UUID_HERE';  // <-- real users.id for now

  const session = await stripe.checkout.sessions.create({
    mode: 'payment',
    payment_method_types: ['card'],
    line_items: [{
      price_data: {
        currency: 'usd',                      // keep USD for now
        product_data: { name: 'Wallet Top-up' },
        unit_amount: amountCents
      },
      quantity: 1
    }],
    success_url: `${origin}/billing?success=1`,  // <-- no localhost
    cancel_url:  `${origin}/billing?canceled=1`,
    metadata: { user_id: userId }
  });

  return NextResponse.json({ url: session.url, id: session.id });
}
```

> Tip: If you prefer a constant, add `PUBLIC_BASE_URL` in Replit Secrets and use it here.

---

## 2) Your SQL check used **double quotes** (Postgres treated it as a column)

From your query error:

```
WHERE user_id = "3d1ca893-63e1-4e66-86b8-a659a4fa9e78"
--           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ column name!
```

In Postgres, **strings use single quotes**:

```sql
SELECT id, user_id, balance_cents, updated_at
FROM wallets
WHERE user_id = '3d1ca893-63e1-4e66-86b8-a659a4fa9e78';
```

Re-run these three sanity checks with **single quotes**:

```sql
-- 1) payments ledger
SELECT id, gateway, gateway_payment_id, amount_cents, currency, status, created_at
FROM payments
ORDER BY id DESC LIMIT 5;

-- 2) wallet transactions
SELECT id, wallet_id, amount_cents, type, gateway, provider_txn_id, created_at
FROM wallet_transactions
ORDER BY id DESC LIMIT 5;

-- 3) the wallet for your test user
SELECT id, user_id, balance_cents, updated_at
FROM wallets
WHERE user_id = 'YOUR_REAL_USER_UUID';
```

---

## Make sure the webhook actually credits the wallet

Double-check your webhook file has these three things:

1. **Node runtime + raw body**

```ts
export const runtime = 'nodejs';

const sig = req.headers.get('stripe-signature');
const rawBody = await req.text(); // not req.json()
const event = stripe.webhooks.constructEvent(rawBody, sig, process.env.STRIPE_WEBHOOK_SECRET!);
```

2. **Handle `checkout.session.completed` and use a REAL `metadata.user_id`.**
   If you still have `'YOUR_TEST_USER_UUID'` there, the credit won’t land on a real wallet.

3. **USD only (for now)**
   If your webhook currently skips non-USD to avoid accidental over-credit, be sure you select **USD** on Stripe Checkout (or lock the session to USD as shown above).

---

## Quick end-to-end test checklist

1. Replace `userId` in the create-session route with a **real** `users.id`.
2. Redeploy / restart the repl.
3. Open **External page** (not the Preview iframe), click **\$25**, pay with `4242 4242 4242 4242`.
4. Stripe Dashboard → **Developers → Webhooks → your endpoint**

   * You should see a **delivery = 200** for `checkout.session.completed`.
5. Run the three SQL queries above. You should see:

   * a row in `payments` (gateway `stripe`, `succeeded`)
   * a row in `wallet_transactions` (`top_up`)
   * wallet `balance_cents` increased by 2500

If any of those still don’t match, paste:

* your current `create-checkout-session` **and** `webhook` files, and
* the latest “Event deliveries” entry (status code + error, if any),
  and I’ll mark the exact line(s) to change.
