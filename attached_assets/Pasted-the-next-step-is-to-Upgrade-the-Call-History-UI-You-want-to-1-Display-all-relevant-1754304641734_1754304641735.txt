the next step is to:

---

## âœ… Upgrade the Call History UI

You want to:

1. Display **all relevant fields from the API** (e.g. `to`, `from`, `duration`, `status`, `pathway_id`, `recording_url`, `summary`, etc.).
2. Use a **responsive data grid** with:

   * Horizontal and vertical scrollbars
   * Pagination support
   * Graceful handling of long text and null values

---

## âœ… Recommended Solution: ShadCN Table + Scroll Wrapper

Hereâ€™s the approach you should take:

### ðŸ§± Columns to Include (Recommended)

| Column         | Notes                                              |
| -------------- | -------------------------------------------------- |
| `From`         | `call.from`                                        |
| `To`           | `call.to`                                          |
| `Date`         | Format from `call.created_at`                      |
| `Time`         | Also derived from `created_at`                     |
| `Duration`     | From `call.call_length` or `call.duration`         |
| `Status`       | `call.status` or `call.queue_status`               |
| `Ended Reason` | `call.ended_reason` or `call.call_ended_by`        |
| `Pathway ID`   | `call.pathway_id`                                  |
| `Summary`      | `call.summary`                                     |
| `Transcript`   | Optional dropdown/collapsible                      |
| `Recording`    | If `call.recording_url` exists, render link/button |

---

### âœ¨ UX Enhancements

* Use `overflow-auto` wrapper for scrollable `<div>`.
* Clip or ellipsize long fields like `summary`, `transcript`, or `pathway_id`.
* Show `Invalid Date` only if `created_at` is missing or not parsable.
* For `recording_url`, show a **"Play"** or **"Download"** icon if present.

---

### ðŸ”§ Example Implementation Snippet (React + Tailwind + ShadCN)

```tsx
<div className="overflow-auto max-h-[75vh]">
  <table className="min-w-[1200px] table-auto border-collapse text-sm">
    <thead className="bg-gray-100 sticky top-0 z-10">
      <tr>
        <th className="p-2 text-left">From</th>
        <th className="p-2 text-left">To</th>
        <th className="p-2">Date</th>
        <th className="p-2">Time</th>
        <th className="p-2">Duration</th>
        <th className="p-2">Status</th>
        <th className="p-2">Ended</th>
        <th className="p-2">Pathway</th>
        <th className="p-2">Summary</th>
        <th className="p-2">Recording</th>
      </tr>
    </thead>
    <tbody>
      {calls.map((call) => {
        const created = new Date(call.created_at)
        return (
          <tr key={call.call_id}>
            <td className="p-2">{call.from || '-'}</td>
            <td className="p-2">{call.to || '-'}</td>
            <td className="p-2">{isNaN(created.getTime()) ? 'Invalid Date' : created.toLocaleDateString()}</td>
            <td className="p-2">{isNaN(created.getTime()) ? 'Invalid Time' : created.toLocaleTimeString()}</td>
            <td className="p-2">{call.call_length ? `${call.call_length.toFixed(2)}s` : '0:00'}</td>
            <td className="p-2">{call.status || 'unknown'}</td>
            <td className="p-2">{call.call_ended_by || call.ended_reason || 'unknown'}</td>
            <td className="p-2 truncate max-w-[120px]">{call.pathway_id || '-'}</td>
            <td className="p-2 truncate max-w-[200px]">{call.summary || '-'}</td>
            <td className="p-2">
              {call.recording_url ? (
                <a href={call.recording_url} target="_blank" rel="noopener noreferrer" className="text-blue-600 underline">Play</a>
              ) : (
                '-'
              )}
            </td>
          </tr>
        )
      })}
    </tbody>
  </table>
</div>
```

---

### ðŸ§© Next Steps

1. âœ… Use this layout in your `/dashboard/call-history/page.tsx`
2. âœ… Update your state to populate `calls` with the API result
3. âœ… Make sure each `call` includes:

   * `created_at`, `from`, `to`, `status`, `summary`, `recording_url`, etc.

---